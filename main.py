import telebot
from telebot import types
import time
import schedule
from threading import Thread

bot = telebot.TeleBot('TOKEN')


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üíª –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ")
    btn2 = types.KeyboardButton("üçΩ –û–±–µ–¥")
    btn3 = types.KeyboardButton("üèñ –ü–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω")
    btn4 = types.KeyboardButton("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –±–æ—Ç –¥–ª—è —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã. –ù–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤—É—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –∏ —è –Ω–∞—á–Ω—É –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏".format(message.from_user), reply_markup=markup)


def schedule_checker():
    while True:
        schedule.run_pending()
        time.sleep(1)


@bot.message_handler(func=lambda message: True)
def fio(message):
    text = message.text
    if text == "üíª –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ":
        bot.send_message(message.chat.id, text="–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç! –ö–æ–≥–¥–∞ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ù–µ –∑–∞—Ç—è–≥–∏–≤–∞–π!")
    if text == "‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ" and len(schedule.get_jobs(message.chat.id)) >= 1:
        schedule.clear(message.chat.id)
        bot.send_message(message.chat.id, "–û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –¢—ã —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å! –ï—Å–ª–∏ –ø–æ–ª—É—á–∏—à—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ —Ç—ã–∫–Ω–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É")
    elif text == "‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ" and len(schedule.get_jobs(message.chat.id)) == 0:
        schedule.clear(message.chat.id)
    else:
        schedule.every(25).minutes.do(get_sending_function(message.chat.id)).tag(message.chat.id)
        schedule.every(29).seconds.do(get_sending_notification(message.chat.id)).tag(message.chat.id)
    if text == "üçΩ –û–±–µ–¥" and len(schedule.get_jobs(message.chat.id)) >= 1:
        schedule.clear(message.chat.id)
        bot.send_message(message.chat.id, "–û—É, —É —Ç–µ–±—è –æ–±–µ–¥? –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –ø–æ—Ä–∞ –∑–∞ —Ä–∞–±–æ—Ç—É")
        schedule.every(29).minutes.do(get_sending_dinner(message.chat.id)).tag(message.chat.id)
    if text == "üèñ –ü–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω" and len(schedule.get_jobs(message.chat.id)) >= 1:
        schedule.clear(message.chat.id)
        bot.send_message(message.chat.id, "–†–∞–±–æ—Ç–∞ —Ä–∞–±–æ—Ç–æ–π, –∞ –æ—Ç–¥—ã—Ö –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –ø–æ—Ä–∞ –∑–∞ —Ä–∞–±–æ—Ç—É")
        schedule.every(14).minutes.do(get_sending_dinner(message.chat.id)).tag(message.chat.id)


def get_sending_function(chatId):
    def send_function():
        bot.send_message(chatId, "–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç! –ü–æ—Ç–æ—Ä–æ–ø–∏—Å—å, —Å–∫–æ—Ä–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å–ª–µ—Ç–∏—Ç!")
        return schedule.CancelJob
    return send_function


def get_sending_notification(chatId):
    def send_function():
        bot.send_message(chatId, "–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 1 –º–∏–Ω—É—Ç–∞! –ü–æ—Ç–æ—Ä–æ–ø–∏—Å—å, —Å–∫–æ—Ä–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å–ª–µ—Ç–∏—Ç!")
        return schedule.CancelJob
    return send_function


def get_sending_dinner(chatId):
    def send_function():
        bot.send_message(chatId, "–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 1 –º–∏–Ω—É—Ç–∞! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ!")
        return schedule.CancelJob
    return send_function


if __name__ == "__main__":
    scheduleThread = Thread(target=schedule_checker)
    scheduleThread.daemon = True
    scheduleThread.start()
    bot.polling()

